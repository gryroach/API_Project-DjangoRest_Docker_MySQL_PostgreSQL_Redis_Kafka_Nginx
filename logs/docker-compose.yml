version: '3.8'

services:

  zookeeper:
    image: zookeeper:3.5
    container_name: zookeeper
    tmpfs: "/datalog"
    ports:
      - "2181:2181"
    networks:
      - project

  kafka:
    image: wurstmeister/kafka:2.11-1.1.1
    container_name: kafka
    restart: always
    ports:
      - "9092:9092"
    expose:
      - "9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "sync:1:1"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

    networks:
      - project

  dblogs:
    image: postgres:13.0-alpine
    volumes:
      - ./db_logs:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: always
    environment:
      POSTGRES_NAME: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    networks:
      - project

  logs:
    build:
      context: django_logs
      dockerfile: Dockerfile
    container_name: logs
    env_file:
      - .env.logs
#    command: python manage.py runserver 0.0.0.0:8000
#    command: uwsgi --socket :8000 --master --enable-threads --module django_logs.wsgi
    command: gunicorn django_logs.wsgi:application --bind 0.0.0.0:8000
    volumes:
      - ./django_logs:/src
    expose:
      - "9092"
      - "8000"
    ports:
      - "8000:8000"
    depends_on:
      - dblogs
    networks:
      - project
  nginx:
    build: ./nginx
    ports:
      - 1337:80
    depends_on:
      - logs
    networks:
      - project

networks:
  project:
    name: project
    driver: bridge